-=PROJECT PROPOSAL=-
Project: Recipe Web Scraper
Authors: Declan Moore, Evan Scherrer


-=ABSTRACT=-
This project aims to solve the problem of managing costs while preparing recipes
in bulk. It is of high importance that, when preparing food in this way, that it
is priced appropriately. To do this, knowledge of the cost of ingredients used
is required. This project aims to reduce the strain of this task by scanning a
database of ingredient costs and their quantities, and by automatic calculation
of the total ingredient cost of a recipe per serving, allowing for easily
adjusting the recipe on the basis of cost or quantity.

-=OUTLINE=-
This project allows user input of a set of ingredients specified by  the user. 
It will parse this ingredients list for the quantities and names of each of the
ingredients in the list. From this, it will convert all the ingredients to the
same internal unit for ease of mathematics. 
After the user has inputted their recipe, the program will search the Target
database for each of the listed ingredients and determine their price per unit.
Knowing this, the program can calculate the average ingredient cost per batch,
and allow the user to adjust the quantity of food prepared on the basis of cost,
or by other scaling factors and compute the appropriate cost.
The program will also allow for user correction if the program has made an error
when parsing the ingredients list or searching the database. For example, if the
user has a recipe using simply "flour" and the automatic database search turns
up a result for "almond flour," it may lead to incorrect costs being computed. 
In this event, the program will allow the user to examine the ingredients that
it has parsed and correct them if necessary.

-=DATA STRUCTURES=-
A variety of data structures will be used in this project. 
List:
  Lists will be used in the parsing of recipes. Recipes will be split into a
  list of strings, one string per each input line. This will aid in the parsing
  of recipe data.
Object Cache:
  Since making redundant requests to remote APIs is both redundant and wasteful,
  it will prove beneficial to have some form of caching results fetched from the
  APIs. We will do this by implementing a cache file in JSON format. It will
  store API results as key:value pairs, including the fetch timestamp. When the
  file is loaded from the disk, entries will have their timestamps checked. If
  they are older than the oldest record allowed, they will be purged from the
  cache. Records purged from the cache will then need to be fetched again from
  the remote API. 
  
-=ATTAINABILITY=-
This project will be able to be completed by semester end since we have a clear
goal in mind for what this project should look like. Its main features have been
planned out in advance, and some of thecore functionality implemented as of now.

-=HINDRANCES=-
A difficulty we have already encountered is the problem of converting data to a
format compatible with the APIs we plan to use. The Target API for looking up
ingredients by name, for example, does not list their volumes, but instead lists
their weights. Since most recipes list ingredients by volume, it becomes
necessary to convert these volumes into weights to match the API. This could be
done by using a database of ingredients and their associated densities, allowing
us to convert them to weights opaquely at runtime. For ingredients not found
in the database, the user may be prompted for this information.

Another hindrance we are likely to face is with the reliability of API search
results. As an example, searching "flour" and "AP flour" may turn up different,
possibly wrong results from the API. Some sort of conversion or preprocessing
can be done to mitigate this effect potentially.
