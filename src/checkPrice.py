import requests
from sys import argv
from utils import rp_parse_ingredient
from bs4 import BeautifulSoup

def main(retailer, identification):
    if retailer == 'target': # :heart_eyes:

        # http get request from target's product API
        product = requests.get(f'https://redsky.target.com/redsky_aggregations/v1/web/pdp_client_v1?key=9f36aeafbe60771e321a7cc95a78140772ab3e96&tcin={int(identification)}&is_bot=false&store_id=2041&pricing_store_id=2041&has_pricing_store_id=true&scheduled_delivery_store_id=1832&visitor_id=0182666D922002019366877E20398E2E&channel=WEB')

        if product.status_code != 200: # check to make sure we got a valid response
            raise Exception(f"Product get request failed with response {product}") # replace this with a bs4 scraper

        price = product.json()['data']['product']['price']['reg_retail'] # pull price and product info from the json response
        bullets = product.json()['data']['product']['item']['product_description']['bullet_descriptions']
        
        weight_bullet = None
        for bullet in bullets: # find the bullet that has 'weight' in it
            if 'weight' in bullet.lower():
                weight_bullet = bullet.lower()
                break

        weight = weight_bullet[(weight_bullet.index('</b>') + 4):].strip() # pull the product weight from the bullet

        amount, unit, nope = rp_parse_ingredient(weight) # parse amount & unit for the product
        
        return list([amount, unit, 'name', price]) # return a list that can be parsed into json

    if retailer == 'walmart': # :face_vomiting:

        headers = { "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36", "cookie": 'vtc=Vd6FNY07t-dsAZ9H3yNwkc; bstc=Vd6FNY07t-dsAZ9H3yNwkc; pxcts=80a1781b-bee9-11ed-a185-4d6d526d5551; _pxvid=80a16cb1-bee9-11ed-a185-4d6d526d5551; TBV=7; adblocked=false; dimensionData=1297; ACID=b78b84b5-7748-4513-804e-c54760f9c15b; hasACID=true; assortmentStoreId=1764; hasLocData=1; TB_Latency_Tracker_100=1; TB_Navigation_Preload_01=1; TB_SFOU-100=; mobileweb=0; xpth=x-o-mart+B2C~x-o-mverified+false; xpa=10hNA|2OL6S|4sTVz|68uha|AGDJ7|BgpxY|D8jju|Eq7vl|FAugj|FOCoj|IM26Z|JbH07|KOsWJ|LNa6Y|MO_JK|Oj9au|SNDcF|SQwC-|SoRKw|X_0sV|aExhh|aN6OE|aVE-S|eAf9_|f8iOA|gODG_|gy6TO|jJAPh|kPWv0|o1Z6f|pyVOq|qqCxQ|qybp-|rwcby|uDs6g|v02IR|xMGB0|xStsO|y3LRi|yaJXs|zPHCS; exp-ck=10hNA12OL6S14sTVz2AGDJ71BgpxY1D8jju1Eq7vl1IM26Z4KOsWJ1Oj9au1SNDcF1SQwC-1X_0sV1aExhh3aVE-S1eAf9_3f8iOA1gy6TO1jJAPh2kPWv01qybp-1v02IR1xStsO1y3LRi1zPHCS1; _pxhd=59eaac2b21a17745c3d0db47556f25e3c660e48a30701cb90f8422dc2a1fd492:80a16cb1-bee9-11ed-a185-4d6d526d5551; xptc=assortmentStoreId+1764; _astc=b807e23b48ab4e9a0f66cf21cb9bcc2f; xpm=1+1678414561+Vd6FNY07t-dsAZ9H3yNwkc~+0; wmlh=d2befc6b8526b261dca2394177ddc5d8706964d8f6d321d4e63206e22c64dd9d; _gid=GA1.2.985928692.1678414867; _ga=GA1.1.1107096631.1678414867; _hjSessionUser_2853208=eyJpZCI6IjA0YTIyMDQ2LTBjMjMtNWU2Mi1hODliLWE0YTFjYTZjOWQ0OCIsImNyZWF0ZWQiOjE2Nzg0MTQ4Njc2MDYsImV4aXN0aW5nIjpmYWxzZX0=; _hjFirstSeen=1; _hjSession_2853208=eyJpZCI6ImVlOThjYTNmLWZlZjctNDNjZS05Y2Q3LTZlNDYwMzM0NGNiOSIsImNyZWF0ZWQiOjE2Nzg0MTQ4Njc2MTIsImluU2FtcGxlIjpmYWxzZX0=; _hjAbsoluteSessionInProgress=0; AMCVS_B5281C8B53309CEF0A490D4D@AdobeOrg=1; AMCV_B5281C8B53309CEF0A490D4D@AdobeOrg=1176715910|MCIDTS|19427|MCMID|17834087791089807073385407452516995875|MCAAMLH-1679019667|9|MCAAMB-1679019667|RKhpRz8krg2tLO6pguXWp5olkAcUniQYPHaMWWgdJ3xzPWQmdj0y|MCOPTOUT-1678422067s|NONE|vVersion|5.4.0; s_nr30=1678414867758-New; s_tslv=1678414867759; s_inv=0; gpv_Page=Privacy & Security; s_cc=true; _ga_HMJ3ZBRYHV=GS1.1.1678414867.1.1.1678414871.0.0.0; locGuestData=eyJpbnRlbnQiOiJTSElQUElORyIsImlzRXhwbGljaXQiOmZhbHNlLCJzdG9yZUludGVudCI6IlBJQ0tVUCIsIm1lcmdlRmxhZyI6ZmFsc2UsImlzRGVmYXVsdGVkIjpmYWxzZSwicGlja3VwIjp7Im5vZGVJZCI6IjE3NjQiLCJ0aW1lc3RhbXAiOjE2Nzg0MTQ1NjE2NDJ9LCJzaGlwcGluZ0FkZHJlc3MiOnsidGltZXN0YW1wIjoxNjc4NDE0NTYxNjQyLCJ0eXBlIjoicGFydGlhbC1sb2NhdGlvbiIsImdpZnRBZGRyZXNzIjpmYWxzZSwicG9zdGFsQ29kZSI6IjUwMzExIiwiY2l0eSI6IkRlcyBNb2luZXMiLCJzdGF0ZSI6IklBIiwiZGVsaXZlcnlTdG9yZUxpc3QiOlt7Im5vZGVJZCI6IjE3NjQiLCJ0eXBlIjoiREVMSVZFUlkiLCJzdG9yZVNlbGVjdGlvblR5cGUiOm51bGx9XX0sInBvc3RhbENvZGUiOnsidGltZXN0YW1wIjoxNjc4NDE0NTYxNjQyLCJiYXNlIjoiNTAzMTEifSwibXAiOltdLCJ2YWxpZGF0ZUtleSI6InByb2Q6djI6Yjc4Yjg0YjUtNzc0OC00NTEzLTgwNGUtYzU0NzYwZjljMTViIn0=; bm_mi=D2917B2E5AAE93D7968CC31942B33C70~YAAQbWDcF0mY/MCGAQAAF5hdyRPAFgD1bka3pjyeVmz14Yi+ItFI7Kt7wsMcbcP3rgW9Gt1Jy3WHrQRQjK7la+nV6HMNUh5kF3MdUYvCgYAsjxot5G0KGHxtM4fo/QUD7+l0blkbEbmNrx64aazadeyI7miqyMZXy/D9M+OPDz7dU467Ge5s4DfgJREoq+Hjb+77r9QtLn2ofoPG/gL/O4o4tlRrIoGwnN/kvuA1FHlcCSVvF/JQ/mDvUu7UhM0pOBeGeeOn7sjB0R/1Y8GLSPwEVK8yx8sZDXdUDaYV1joKIz5z9wwOCgiqQyKC2SFI5KUQ3aCuGxiZIJPkG0WZKdA1KLzRlOhkdFaxafB3xQkGGRnwnlpr/Toeyg9gz4cAKGS7kh8ee8lrGdQCr1LeN2PYMw6O~1; bm_sv=0F6F302EE7E6537BE93B2046CA20CAB2~YAAQbWDcF1uY/MCGAQAApZldyRMBh/5fl1i7LhRo1lWplVDhw1Ci+73XLfwUWu7bqAGKKH22FNfzOBWeWlwsr19ZLpirweZEVDKyPNZfj5JfT83/jdZLCq4kUkNumC4/486kb6u5iYGQjtnz/th9HPhWsmJsvp2J0NB8eiisNPuWE3ovP7g5itOQzRqzhXoIpRpNyQ5PnJiC5KQVKkeLnareO6Cr4wn5Tg1BVZLqqEMHFRrDMyAHTuB2kO7aGjqftNM=~1; ak_bmsc=C242311F2BEC75CCAD5BB7A4446E5E69~000000000000000000000000000000~YAAQJ2DcF8YYdb+GAQAAtN5hyRN2syWUuVDpaegxade/U7qtb+uZEqKJKRTt9/KlxYs1zVeQu9B9ATxJyHOjbB3VeOASVoUiCAN5XYJW4FGrcYTEYfF4KFKpy5NtjcqKM9mXWm1lck/t/J4/z7LZGlUhOD8Lb8Slq/XViuc+gtd4MTGI6r/ZOI39V2KUmGlgOtvYAHa+vnjAHaYNL/GH0IEJ+EqPnIkAiPMfbAR/52gdEcFs9zTSLwkZY0GB04wmcVqvPiD/8ITptGjidwp+0nnPB18yv+rtJTbucxv6JVKf4iaeRGWjk38W69LxXZfs1pgVwVr+XilX3/RCzEMPQkTdzbThKhFKSwwt8yXqE+BDZLy+UUVRsbAF69Nv7qQZVDECAu7F/XtdOw3feLcHFW+eQRpMoWbgjRrOhFQA58SzhmIhvSkrvm/9JuXf0xM7gjhXahsGeFTMh3f+qPh/+hOyTLMp6Plfnxz7JNhpe7gdxMSbIxI5rpKlw0O756OZkLvoFO7+Eu8BmZwrM7nj6w3yr1tKqDmBClkPwM+Zvuk3oQRCNbvjI6o4mvsHDSCZMPsmOjhxMWpIQ6LNZvKriWuzVo4ChVY1OptD; AID=wmlspartner=0:reflectorid=0000000000000000000000:lastupd=1678416499231; auth=MTAyOTYyMDE4brr9DWLVorDnf+GHg0GNxFdpPebUtYwbljCtljtR+jao6goOTZDJ9WvJO3NUWEaXfjvxx8L9EdlyZDSE1N5pFcdvs0gEusEWEN4ow8RjJzzuVQPXKxSNEjHuCNbAeNAx767wuZloTfhm7Wk2Kcjygt6CFmh5hT8BoAhiLFQG8TOHGVilV4KY033TbwCLff40bFL7bk57/V7S/n+GgX7hqvOyCCLg5vWfVxBy12u02egUMk70P8glgOEpLOprhDfMDCcb9mgycy9jtT1uIyOBHe4ADNZHmaojlvGyMVb6O1BSwig6qy9YP4UbkianbSo72BKrsgDrjW8xz6LA8VjYKxT/x2eyLXxiP1Oz39U5/qp8bbZxIzr827t0j6ni0lvaWgPtb/oRzZd8Cy8mwsAf34hDrUW5F0FAuGjAOj3EI4M=; xpkdw=1; xptwj=rq:e1c3c9dd56dd30065662:i2d2r1towFk3b0mKZjT3OC2v1MwAxfgxs3aFtrqm0NSGjEWGBOLqHHEzvO8MgmwcJqpJiOp7AA6Dsn6RjvVE5Ma7IaR+TRS8+x6bZkK98DCGZpXdqKxvkmTny/59Kg==; akavpau_p2=1678417099~id=3017ee92135aa69cbcc568650a63f4b0; _pxff_cfp=1; com.wm.reflector="reflectorid:0000000000000000000000@lastupd:1678416500000@firstcreate:1678415599294"; locDataV3=eyJpc0RlZmF1bHRlZCI6ZmFsc2UsImlzRXhwbGljaXQiOmZhbHNlLCJpbnRlbnQiOiJTSElQUElORyIsInBpY2t1cCI6W3siYnVJZCI6IjAiLCJub2RlSWQiOiIxNzY0IiwiZGlzcGxheU5hbWUiOiJXaW5kc29yIEhlaWdodHMgU3VwZXJjZW50ZXIiLCJub2RlVHlwZSI6IlNUT1JFIiwiYWRkcmVzcyI6eyJwb3N0YWxDb2RlIjoiNTAzMjQiLCJhZGRyZXNzTGluZTEiOiIxMDAxIDczcmQgU3QiLCJjaXR5IjoiV2luZHNvciBIZWlnaHRzIiwic3RhdGUiOiJJQSIsImNvdW50cnkiOiJVUyIsInBvc3RhbENvZGU5IjoiNTAzMjQtMTMxMSJ9LCJnZW9Qb2ludCI6eyJsYXRpdHVkZSI6NDEuNTk3MDU5LCJsb25naXR1ZGUiOi05My43MTM4Mjh9LCJpc0dsYXNzRW5hYmxlZCI6dHJ1ZSwic2NoZWR1bGVkRW5hYmxlZCI6dHJ1ZSwidW5TY2hlZHVsZWRFbmFibGVkIjp0cnVlLCJodWJOb2RlSWQiOiIxNzY0Iiwic3RvcmVIcnMiOiIwNjowMC0yMzowMCIsInN1cHBvcnRlZEFjY2Vzc1R5cGVzIjpbIlBJQ0tVUF9DVVJCU0lERSIsIlBJQ0tVUF9JTlNUT1JFIl19XSwic2hpcHBpbmdBZGRyZXNzIjp7ImxhdGl0dWRlIjo0MS42MDA5LCJsb25naXR1ZGUiOi05My42NzA2LCJwb3N0YWxDb2RlIjoiNTAzMTEiLCJjaXR5IjoiRGVzIE1vaW5lcyIsInN0YXRlIjoiSUEiLCJjb3VudHJ5Q29kZSI6IlVTQSIsImdpZnRBZGRyZXNzIjpmYWxzZX0sImFzc29ydG1lbnQiOnsibm9kZUlkIjoiMTc2NCIsImRpc3BsYXlOYW1lIjoiV2luZHNvciBIZWlnaHRzIFN1cGVyY2VudGVyIiwic3VwcG9ydGVkQWNjZXNzVHlwZXMiOltdLCJpbnRlbnQiOiJQSUNLVVAiLCJzY2hlZHVsZUVuYWJsZWQiOmZhbHNlfSwiZGVsaXZlcnkiOnsiYnVJZCI6IjAiLCJub2RlSWQiOiIxNzY0IiwiZGlzcGxheU5hbWUiOiJXaW5kc29yIEhlaWdodHMgU3VwZXJjZW50ZXIiLCJub2RlVHlwZSI6IlNUT1JFIiwiYWRkcmVzcyI6eyJwb3N0YWxDb2RlIjoiNTAzMjQiLCJhZGRyZXNzTGluZTEiOiIxMDAxIDczcmQgU3QiLCJjaXR5IjoiV2luZHNvciBIZWlnaHRzIiwic3RhdGUiOiJJQSIsImNvdW50cnkiOiJVUyIsInBvc3RhbENvZGU5IjoiNTAzMjQtMTMxMSJ9LCJnZW9Qb2ludCI6eyJsYXRpdHVkZSI6NDEuNTk3MDU5LCJsb25naXR1ZGUiOi05My43MTM4Mjh9LCJpc0dsYXNzRW5hYmxlZCI6dHJ1ZSwic2NoZWR1bGVkRW5hYmxlZCI6dHJ1ZSwidW5TY2hlZHVsZWRFbmFibGVkIjp0cnVlLCJhY2Nlc3NQb2ludHMiOlt7ImFjY2Vzc1R5cGUiOiJERUxJVkVSWV9BRERSRVNTIn1dLCJodWJOb2RlSWQiOiIxNzY0IiwiaXNFeHByZXNzRGVsaXZlcnlPbmx5IjpmYWxzZSwic3VwcG9ydGVkQWNjZXNzVHlwZXMiOlsiREVMSVZFUllfQUREUkVTUyJdfSwiaW5zdG9yZSI6ZmFsc2UsInJlZnJlc2hBdCI6MTY3ODQxNjgwMDU1MCwidmFsaWRhdGVLZXkiOiJwcm9kOnYyOmI3OGI4NGI1LTc3NDgtNDUxMy04MDRlLWM1NDc2MGY5YzE1YiJ9; __cf_bm=zxNEJBTTWyFrq0w_OZMUWZjaaR6JXMKWUA2LdM3kB9I-1678416500-0-Adet/Gwd9LrlGs3w016aDcvC663jALI9LOXmP7tlNFhpfTnZn8xdTD8j93epZoyb8y+cgU3kO8QNca23os2FDMm9HTjdI9vZNt8m22eXVBGF; _px3=07a57a170c1509539a3017a36ebfa63783d4b8b58d6338bce7d32c91d153d243:OkF/3UbAGZSBVVupXXQ1ZNSLlK2oMDrimSYTZw95sYAGCQYoVpUzpzosq2mcIRGq1EV8dAiwNrfdxhZKqQzuyw==:1000:16wEkJlnHkGbyfpUz53ZbPOObRZAzcnpa5m9lD5JzSIIriRolOGqbQqauUaUGS0xDwd4jy+Fz5Zw+4v5sw55GdF46p9GulT4cZhBo2VhAvsAXgbYTT59ZDLaeTrpq1Zk97+0KlHOTxMxlBwCS2+DJmvqzfPXa2qVhxU979i0xOGT0zbZzu6daDvfz1TUsyR/IiFXKPhTNQplyQFEcerJ3g==; xptwg=3215528235:15BCBF029A85D60:379FDA2:9143472:9C2E6E22:1E3BA484:; TS012768cf=0179e28498098ff1768e0115b9db565448e72126fddebe2d40365ae0111331437a783a41a02dc5ac832a467d4a407b8990f236c59f; TS01a90220=0179e28498098ff1768e0115b9db565448e72126fddebe2d40365ae0111331437a783a41a02dc5ac832a467d4a407b8990f236c59f; TS2a5e0c5c027=0853f739adab2000969517f2b93467f4f6744197d6f5bea6c539c62fb60b48dcc59d113cfdebdbb70822f04e7f11300008d033f1c73be9b7b7d499d339e1b1d9140fe02d34c6f7532b5138e68aead40e6d4155cad81932d2c3dc7f2fe5a519ec; _pxde=d92dbdd70f4fb4720e6a560831e98de3c442dea64ffe4354a5e31b3cb841ab61:eyJ0aW1lc3RhbXAiOjE2Nzg0MTY1MTE3NjF9' }

        # http get request from a walmart product page
        response = requests.get(f'https://www.walmart.com/ip/seort/{identification}', headers=headers)

        parsedHtml = BeautifulSoup(response.text, 'html.parser') # parse the html

        price = parsedHtml.find('span', attrs={'itemprop':'price'}).text.replace('$', '') # get price
        name = parsedHtml.find('h1', attrs={'itemprop':'name'}).text # get product title

        amount, unit, nope = rp_parse_ingredient(name) # parse amount & unit for the product from the title

        return list([amount, unit, 'name', price]) # return a list that can be parsed into json
    
    raise Exception(f"{retailer} is not a valid retailer.")

if __name__ == "__main__":
    print(main(argv[1], argv[2]))